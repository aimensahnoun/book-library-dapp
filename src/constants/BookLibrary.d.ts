/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BookLibraryInterface extends ethers.utils.Interface {
  functions: {
    "addBook(string,uint16)": FunctionFragment;
    "bookCount()": FunctionFragment;
    "borrowBook(uint256)": FunctionFragment;
    "checkBorrower(uint256)": FunctionFragment;
    "getBookById(uint256)": FunctionFragment;
    "getUserBookId(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnBook(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewBookList()": FunctionFragment;
    "viewPastBorrowings()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bookCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBorrower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBookById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBookId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewBookList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPastBorrowings",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBookId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewBookList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPastBorrowings",
    data: BytesLike
  ): Result;

  events: {
    "BookAdded(uint256,string,uint256)": EventFragment;
    "BookBorrowed(uint256,address)": EventFragment;
    "BookReturned(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BookAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BookBorrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BookReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BookAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    bookId: BigNumber;
    name: string;
    count: BigNumber;
  }
>;

export type BookBorrowedEvent = TypedEvent<
  [BigNumber, string] & { bookId: BigNumber; user: string }
>;

export type BookReturnedEvent = TypedEvent<
  [BigNumber, string] & { bookId: BigNumber; user: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class BookLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BookLibraryInterface;

  functions: {
    addBook(
      _name: string,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bookCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkBorrower(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBookById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { name: string; count: number }]>;

    getUserBookId(
      sender: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewBookList(
      overrides?: CallOverrides
    ): Promise<[([string, number] & { name: string; count: number })[]]>;

    viewPastBorrowings(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          borrower: string;
          bookName: string;
          time: BigNumber;
        })[]
      ]
    >;
  };

  addBook(
    _name: string,
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bookCount(overrides?: CallOverrides): Promise<BigNumber>;

  borrowBook(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkBorrower(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getBookById(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { name: string; count: number }>;

  getUserBookId(
    sender: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnBook(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewBookList(
    overrides?: CallOverrides
  ): Promise<([string, number] & { name: string; count: number })[]>;

  viewPastBorrowings(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      borrower: string;
      bookName: string;
      time: BigNumber;
    })[]
  >;

  callStatic: {
    addBook(
      _name: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bookCount(overrides?: CallOverrides): Promise<BigNumber>;

    borrowBook(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    checkBorrower(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBookById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { name: string; count: number }>;

    getUserBookId(
      sender: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnBook(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewBookList(
      overrides?: CallOverrides
    ): Promise<([string, number] & { name: string; count: number })[]>;

    viewPastBorrowings(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        borrower: string;
        bookName: string;
        time: BigNumber;
      })[]
    >;
  };

  filters: {
    "BookAdded(uint256,string,uint256)"(
      bookId?: null,
      name?: null,
      count?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { bookId: BigNumber; name: string; count: BigNumber }
    >;

    BookAdded(
      bookId?: null,
      name?: null,
      count?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { bookId: BigNumber; name: string; count: BigNumber }
    >;

    "BookBorrowed(uint256,address)"(
      bookId?: BigNumberish | null,
      user?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bookId: BigNumber; user: string }
    >;

    BookBorrowed(
      bookId?: BigNumberish | null,
      user?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bookId: BigNumber; user: string }
    >;

    "BookReturned(uint256,address)"(
      bookId?: BigNumberish | null,
      user?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bookId: BigNumber; user: string }
    >;

    BookReturned(
      bookId?: BigNumberish | null,
      user?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bookId: BigNumber; user: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addBook(
      _name: string,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bookCount(overrides?: CallOverrides): Promise<BigNumber>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkBorrower(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBookById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBookId(
      sender: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewBookList(overrides?: CallOverrides): Promise<BigNumber>;

    viewPastBorrowings(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addBook(
      _name: string,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bookCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkBorrower(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBookById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBookId(
      sender: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewBookList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewPastBorrowings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
